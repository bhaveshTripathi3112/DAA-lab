#include <iostream>
#include <vector>
using namespace std;

int comparision = 0;
int swaps= 0;

// Partition function that rearranges the array and counts comparisons and inversions
int partition(int arr[], int start, int end) {
    // Choosing the pivot element (here, we use the last element as pivot)
    int pivot = arr[end];
    int i = start - 1;

    for (int j = start; j < end; j++) {
        comparision++;  // Counting each comparison between arr[j] and pivot
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
            swaps++;
        }
    }
    // Place pivot in its correct position by swapping
    swap(arr[i + 1], arr[end]);
    swaps++;
    return i + 1;
}

// QuickSort function that recursively sorts the array and counts comparisons and inversions
void quickSort(int arr[], int start, int end) {
    if (start >= end) {
        return;
    }

    int pivotIndex = partition(arr, start, end);

    // Recursively sort the subarrays
    quickSort(arr, start, pivotIndex - 1);
    quickSort(arr, pivotIndex + 1, end);
}

int main() {
    int n;
    cout << "Enter the size of array: ";
    cin >> n;
    
    int arr[n];

    cout << "Enter the elements in array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Array before sorting: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    // Call the quickSort function to sort the array and count comparisons and inversions
    quickSort(arr, 0, n - 1);

    cout << endl << "Sorted array is: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    cout << endl << "Comparisons are: " << comparision;
    cout << endl << "swaps  are: " <<  swaps<< endl;

    return 0;
}
